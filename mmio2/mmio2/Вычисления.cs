using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace mmio2
{
    class Вычисления
    {
        public List<Дробь> ФункцияЦели = new List<Дробь>();
        public List<СтрокаОграничения> Ограничения = new List<СтрокаОграничения>();
        public List<ЭлементКанонизированнойФункцииЦели> КанонизируемаяФункцияЦели = new List<ЭлементКанонизированнойФункцииЦели>();
        public List<КанонизированнаяСтрокаОграничения> Aij = new List<КанонизированнаяСтрокаОграничения>();
        public List<List<ТаблицаДляСимплексРазностей>> СимплексРазности = new List<List<ТаблицаДляСимплексРазностей>>();
        public List<ТаблицаДляEij> ekij = new List<ТаблицаДляEij>();
        public List<List<ТаблицаДляСимплексРазностей>> РазрешающиеМножители = new List<List<ТаблицаДляСимплексРазностей>>();
        public SortedList<int, Дробь> Ответ = new SortedList<int, Дробь>();
        public int КоличествоИтераций = 0;
        public Opt opt;
        public List<string> it = new List<string>();
        public Вычисления(List<Дробь> FuncCeli, List<СтрокаОграничения> Ogranich, Opt opt)
        {
            КанонизируемаяФункцияЦели.Clear();
            Aij.Clear();
            СимплексРазности.Clear();
            ekij.Clear();
            РазрешающиеМножители.Clear();
            ФункцияЦели.Clear();
            this.Ограничения.Clear();
            for (int i = 0; i < FuncCeli.Count; i++)
            {
                ФункцияЦели.Add(FuncCeli[i]);
            }

            for (int i = 0; i < Ogranich.Count; i++)
            {
                Ограничения.Add(new СтрокаОграничения());
                this.Ограничения[i].Знак = Ogranich[i].Знак;
                this.Ограничения[i].СвободныйЧлен = Ogranich[i].СвободныйЧлен;
                for (int j = 0; j < Ogranich[i].Строка.Count; j++)
                {
                    this.Ограничения[i].Строка.Add(Ogranich[i].Строка[j]);
                }
            }
            this.opt = opt;


            Канонизация();
            ВычислениеИтераций();
        }

        void Канонизация()
        {
            //Пересылаем в другие списки коэфициенты при базисных переменных
            for (int i = 0; i < ФункцияЦели.Count; i++)
            {
                КанонизируемаяФункцияЦели.Add(new ЭлементКанонизированнойФункцииЦели(ФункцияЦели[i], false));
            }
            for (int i = 0; i < Ограничения.Count; i++)
            {
                Aij.Add(new КанонизированнаяСтрокаОграничения());
                //первым добавляем свободный член
                Aij[i].Строка.Add(new Элемент(Ограничения[i].СвободныйЧлен, ТипПеременной.СвободныйЧлен));
                for (int j = 0; j < Ограничения[i].Строка.Count; j++)
                {//помечаем переменную как базисную
                    Aij[i].Строка.Add(new Элемент(Ограничения[i].Строка[j], ТипПеременной.Базисная));
                }
            }
            //Канонизируем
            for (int i = 0; i < Ограничения.Count; i++)
            {
                //если знак < (меньше), то добавляем дополнительную переменную
                if (Ограничения[i].Знак == "<=")//< k=1
                {
                    //доп.пер. с коэф 1
                    Aij[i].Строка.Add(new Элемент(new Дробь(1), ТипПеременной.Дополнительная));
                    //в функцию цели с коэф 0
                    КанонизируемаяФункцияЦели.Add(new ЭлементКанонизированнойФункцииЦели(new Дробь(0), false));
                    //для остальных доп.пер. с коэф 0
                    for (int j = 0; j < Ограничения.Count; j++)
                    {
                        if (i != j)
                        {
                            Aij[j].Строка.Add(new Элемент(new Дробь(0), ТипПеременной.Дополнительная));
                        }
                    }
                    //добавляем в базис
                    Aij[i].Базис = Aij[i].Строка.Count - 1;
                    Aij[i].cj = КанонизируемаяФункцияЦели[Aij[i].Базис - 1];
                }
                //иначе если знак > (больше), то добавляем дополнительную переменную *(-1) и искуственную
                else if (Ограничения[i].Знак == ">=")//> k=-1
                {
                    //доп.пер. с коэф -1
                    Aij[i].Строка.Add(new Элемент(new Дробь(-1), ТипПеременной.Дополнительная));
                    //в функцию цели с коэф 0
                    КанонизируемаяФункцияЦели.Add(new ЭлементКанонизированнойФункцииЦели(new Дробь(0), false));
                    //для остальных доп.пер. с коэф 0
                    for (int j = 0; j < Ограничения.Count; j++)
                    {
                        if (i != j)
                        {
                            Aij[j].Строка.Add(new Элемент(new Дробь(0), ТипПеременной.Дополнительная));
                        }
                    }
                    //иск. пер с коэф 1
                    Aij[i].Строка.Add(new Элемент(new Дробь(1), ТипПеременной.Искуственная));
                    //в функцию цели с коэф завис от напр. опр. мах -М, мин +М
                    КанонизируемаяФункцияЦели.Add(new ЭлементКанонизированнойФункцииЦели(new Дробь(opt == Opt.Max ? -1 : 1), true));
                    //для остальных иск. пер. с коэф 0
                    for (int j = 0; j < Ограничения.Count; j++)
                    {
                        if (i != j)
                        {
                            Aij[j].Строка.Add(new Элемент(new Дробь(0), ТипПеременной.Искуственная));
                        }
                    }
                    //добавляем в базис
                    Aij[i].Базис = Aij[i].Строка.Count - 1;
                    Aij[i].cj = КанонизируемаяФункцияЦели[Aij[i].Базис - 1];
                }
                else if (Ограничения[i].Знак == "=")//=
                {
                }
            }
        }
        public int ВозвращениеСтрокиВЕijСДаннымБазисом(int s, int bazis)
        {
            for (int i = 0; i < ekij[s].Tablica.Count; i++)
            {
                if (ekij[s].Tablica[i].Базис == bazis)
                {
                    return i;
                }
            }
            return 0;
        }
        void ВычислениеEkij(int s)
        {
            //первая итерация
            if (s == 0)
            {
                //выделяем память
                ekij.Add(new ТаблицаДляEij());
                for (int i = 0; i < Aij.Count; i++)
                {
                    ekij[s].Tablica.Add(new СтрокаДляEij());
                }
                //из А в е
                for (int i = 0; i < Aij.Count; i++)
                {
                    for (int j = 0; j < Aij[i].Строка.Count; j++)
                    {
                        //e0=A0
                        if (j == 0)
                        {
                            ekij[s].Tablica[i].Строка.Add(Aij[i].Строка[j].d);
                        }
                        else
                            //eij=значение Aij при искуственных переменных и дополнительных неотрицательных
                            if (j == Aij[i].Базис)
                            {
                                for (int k = 0; k < Aij.Count; k++)
                                {
                                    ekij[s].Tablica[i].Строка.Add(Aij[i].Строка[Aij[k].Базис].d);
                                }
                            }
                    }
                    //копирование значений базисов и 
                    ekij[s].Tablica[i].Базис = Aij[i].Базис;
                    //cj
                    ekij[s].Tablica[i].cj = Aij[i].cj;
                }
            }
            //другие итерации
            else
            {
                int rВыводимаяИзБазисаСтрока = ekij[s - 1].rВыводимаяИзБазисаСтрока;
                int irНомерВЕijВыводимойИзБазисаСтроки = ВозвращениеСтрокиВЕijСДаннымБазисом(s - 1, rВыводимаяИзБазисаСтрока);
                int kСтолбецВводимыйВБазис = ekij[s - 1].kВводимыйВБазисСтолбец;
                //выделение памяти
                ekij.Add(new ТаблицаДляEij());
                for (int i = 0; i < ekij[s - 1].Tablica.Count; i++)
                {
                    ekij[s].Tablica.Add(new СтрокаДляEij());
                    for (int j = 0; j < ekij[s - 1].Tablica[i].Строка.Count; j++)
                    {
                        ekij[s].Tablica[i].Строка.Add(new Дробь(0));
                    }
                }

                //i==НомерВЕijВыводимойИзБазисаСтроки
                for (int j = 0; j < ekij[s - 1].Tablica[irНомерВЕijВыводимойИзБазисаСтроки].Строка.Count; j++)
                {
                    ekij[s].Tablica[irНомерВЕijВыводимойИзБазисаСтроки].Строка[j] =
                        ekij[s - 1].Tablica[irНомерВЕijВыводимойИзБазисаСтроки].Строка[j]
                        / ekij[s - 1].Tablica[irНомерВЕijВыводимойИзБазисаСтроки].AСоЗвёздочкой;
                }

                //вводим базис
                ekij[s].Tablica[irНомерВЕijВыводимойИзБазисаСтроки].Базис = ekij[s - 1].kВводимыйВБазисСтолбец;
                ekij[s].Tablica[irНомерВЕijВыводимойИзБазисаСтроки].cj = КанонизируемаяФункцияЦели[ekij[s - 1].kВводимыйВБазисСтолбец - 1];
                //i!=r
                for (int i = 0; i < ekij[s - 1].Tablica.Count; i++)
                {
                    if (i != irНомерВЕijВыводимойИзБазисаСтроки)
                    {
                        for (int j = 0; j < ekij[s - 1].Tablica[i].Строка.Count; j++)
                        {
                            ekij[s].Tablica[i].Строка[j] =
                                ekij[s - 1].Tablica[i].Строка[j]
                                - ekij[s - 1].Tablica[irНомерВЕijВыводимойИзБазисаСтроки].Строка[j]
                                / ekij[s - 1].Tablica[irНомерВЕijВыводимойИзБазисаСтроки].AСоЗвёздочкой
                                * ekij[s - 1].Tablica[i].AСоЗвёздочкой;
                        }
                        //копирование значений базисов и 
                        ekij[s].Tablica[i].Базис = ekij[s - 1].Tablica[i].Базис;
                        //cj
                        ekij[s].Tablica[i].cj = ekij[s - 1].Tablica[i].cj;
                    }
                }
            }
        }
        void ВычисленияРазрешающихМножителей(int s)
        {
            РазрешающиеМножители.Add(new List<ТаблицаДляСимплексРазностей>());
            for (int j = 0; j < ekij[s].Tablica[0].Строка.Count; j++)
            {
                ТаблицаДляСимплексРазностей t = new ТаблицаДляСимплексРазностей();
                t.p = Aij[0].Строка[j].p;
                for (int i = 0; i < ekij[s].Tablica.Count; i++)
                {
                    if (ekij[s].Tablica[i].cj.бесконечность == true && ekij[s].Tablica[i].cj.дробь.Знак < 0)
                    {
                        t.КоэффициентПриБесконечности -= ekij[s].Tablica[i].Строка[j];
                    }
                    else if (ekij[s].Tablica[i].cj.бесконечность == true && ekij[s].Tablica[i].cj.дробь.Знак > 0)
                    {
                        t.КоэффициентПриБесконечности += ekij[s].Tablica[i].Строка[j];
                    }
                    else
                    {
                        t.Число += ekij[s].Tablica[i].Строка[j] * ekij[s].Tablica[i].cj.дробь;
                    }
                }
                РазрешающиеМножители[s].Add(t);
            }
        }
        void ВычисленияСимплексРазностей(int s)
        {
            СимплексРазности.Add(new List<ТаблицаДляСимплексРазностей>());
            for (int j = 0; j < Aij[0].Строка.Count; j++)//для всех симплекс разностей в данной строке
            {
                ТаблицаДляСимплексРазностей sr = new ТаблицаДляСимплексРазностей();
                for (int i = 0; i < Aij.Count; i++)
                {
                    sr.КоэффициентПриБесконечности += РазрешающиеМножители[s][i + 1].КоэффициентПриБесконечности * Aij[i].Строка[j].d;
                    sr.Число += РазрешающиеМножители[s][i + 1].Число * Aij[i].Строка[j].d;
                    sr.p = Aij[i].Строка[j].p;
                    if (s != 0)
                    {
                        sr.Выведён = СимплексРазности[s - 1][j].Выведён;
                        sr.Введён = СимплексРазности[s - 1][j].Введён;
                        if (sr.Введён == false && ekij[s - 1].kВводимыйВБазисСтолбец == j)
                        {
                            sr.Введён = true;
                        }
                    }
                }
                if (j != 0)
                {
                    if (КанонизируемаяФункцияЦели[j - 1].бесконечность == true && КанонизируемаяФункцияЦели[j - 1].дробь < 0)
                    {
                        sr.КоэффициентПриБесконечности++;
                    }
                    else
                        if (КанонизируемаяФункцияЦели[j - 1].бесконечность == true && КанонизируемаяФункцияЦели[j - 1].дробь > 0)
                        {
                            sr.КоэффициентПриБесконечности--;
                        }
                        else
                        {
                            sr.Число -= КанонизируемаяФункцияЦели[j - 1].дробь;
                        }
                }
                СимплексРазности[s].Add(sr);//добавление одной симплекс разности в данной строке
            }
        }
        void ВычисленияАсозвёздочкой(int s)
        {
            for (int i = 0; i < ekij[s].Tablica.Count; i++)
            {
                for (int j = 1; j < ekij[s].Tablica[i].Строка.Count; j++)
                {
                    ekij[s].Tablica[i].AСоЗвёздочкой += ekij[s].Tablica[i].Строка[j] * Aij[j - 1].Строка[ekij[s].kВводимыйВБазисСтолбец].d;
                }
            }
        }
        void ВычисленияQ(int s)
        {
            for (int i = 0; i < ekij[s].Tablica.Count; i++)
            {
                ekij[s].Tablica[i].Q = ekij[s].Tablica[i].Строка[0] / ekij[s].Tablica[i].AСоЗвёздочкой;
            }
        }
        int ВычислениеВводимогоВБазис(int s)
        {
            int mini = 1;
            //при max - самый большой отрицательный элемент
            if (opt == Opt.Max)
            {
                ТаблицаДляСимплексРазностей sr = new ТаблицаДляСимплексРазностей(СимплексРазности[s][1].КоэффициентПриБесконечности, СимплексРазности[s][1].Число);
                for (int i = 2; i < СимплексРазности[s].Count; i++)
                {
                    if (СимплексРазности[s][i].Выведён == false)
                    {
                        if (СимплексРазности[s][i].КоэффициентПриБесконечности < 0 &&
                            СимплексРазности[s][i].КоэффициентПриБесконечности <= sr.КоэффициентПриБесконечности &&
                            СимплексРазности[s][i].p != ТипПеременной.Искуственная &&
                            СимплексРазности[s][i].Введён == false)
                        {
                            sr.КоэффициентПриБесконечности = СимплексРазности[s][i].КоэффициентПриБесконечности;
                            sr.Число = СимплексРазности[s][i].Число;
                            mini = i;
                        }
                        if (СимплексРазности[s][i].КоэффициентПриБесконечности == 0 &&
                            sr.КоэффициентПриБесконечности == 0)
                        {
                            if (СимплексРазности[s][i].Число < 0 &&
                                СимплексРазности[s][i].Число <= sr.Число &&
                                СимплексРазности[s][i].p != ТипПеременной.Искуственная &&
                                СимплексРазности[s][i].Введён == false)
                            {
                                sr.Число = СимплексРазности[s][i].Число;
                                mini = i;
                            }
                        }
                    }
                }
            }
            //при min - самый большой положительный элемент
            else if (opt == Opt.Min)
            {
                ТаблицаДляСимплексРазностей sr = new ТаблицаДляСимплексРазностей(СимплексРазности[s][1].КоэффициентПриБесконечности, СимплексРазности[s][1].Число);
                for (int i = 2; i < СимплексРазности[s].Count; i++)
                {
                    if (СимплексРазности[s][i].Выведён == false)
                    {
                        if (СимплексРазности[s][i].КоэффициентПриБесконечности > 0 &&
                            СимплексРазности[s][i].КоэффициентПриБесконечности >= sr.КоэффициентПриБесконечности &&
                            СимплексРазности[s][i].p != ТипПеременной.Искуственная &&
                            СимплексРазности[s][i].Введён == false)
                        {
                            sr.КоэффициентПриБесконечности = СимплексРазности[s][i].КоэффициентПриБесконечности;
                            sr.Число = СимплексРазности[s][i].Число;
                            mini = i;
                        }
                        if (СимплексРазности[s][i].КоэффициентПриБесконечности == 0 &&
                            sr.КоэффициентПриБесконечности == 0)
                        {
                            if (СимплексРазности[s][i].Число > 0 &&
                                СимплексРазности[s][i].Число >= sr.Число &&
                                СимплексРазности[s][i].p != ТипПеременной.Искуственная &&
                                СимплексРазности[s][i].Введён == false)
                            {
                                sr.Число = СимплексРазности[s][i].Число;
                                mini = i;
                            }
                        }
                    }
                }
            }
            return mini;
        }
        int ВычислениеВыводимогоИзБазиса(int s)
        {
            int k = 0;
            int mini = 0;
            Дробь min = new Дробь(0);
            while (k < ekij[s].Tablica.Count)
            {
                if (ekij[s].Tablica[k].Q >= 0)
                {
                    mini = ekij[s].Tablica[k].Базис;
                    min = ekij[s].Tablica[k].Q;
                    break;
                }
                else
                {
                    k++;
                }
            }

            for (int i = k; i < ekij[s].Tablica.Count; i++)
            {
                if (ekij[s].Tablica[i].Q < min && ekij[s].Tablica[i].Q > 0)
                {
                    mini = ekij[s].Tablica[i].Базис;
                    min = ekij[s].Tablica[i].Q;
                }
            }
            return mini;
        }
        void УдалениеИзСимплексРазностейВыведеннойИскуственнойПеременной(int s)
        {
            if (s != 0)
            {
                for (int i = 0; i < СимплексРазности[s].Count; i++)
                {
                    if (ekij[s - 1].rВыводимаяИзБазисаСтрока == i && СимплексРазности[s][i].p == ТипПеременной.Искуственная)
                    {
                        СимплексРазности[s][i].Выведён = true;
                    }
                }
            }
        }
        ДостижениеОптимума ПроверкаНаДостиженияОптимума(int s)
        {
            for (int i = 0; i < СимплексРазности[s].Count; i++)
            {
                if (СимплексРазности[s][i].Выведён == false && СимплексРазности[s][i].КоэффициентПриБесконечности != 0)
                {
                    return ДостижениеОптимума.НеДостигнут;
                }
                if (СимплексРазности[s][i].p == ТипПеременной.Дополнительная || СимплексРазности[s][i].p == ТипПеременной.Базисная)
                {
                    //если решаем на максимум
                    if (opt == Opt.Max)
                    {
                        if (СимплексРазности[s][i].Число < 0)
                        {
                            //оптимум не достигнут
                            return ДостижениеОптимума.НеДостигнут;
                        }
                    }
                    //если решаем на минимум
                    else
                    {
                        //проверяем на отрицательность достижение всех симплекс разностей
                        if (СимплексРазности[s][i].Число > 0)
                        {
                            //оптимум не достигнут
                            return ДостижениеОптимума.НеДостигнут;
                        }
                    }
                }
                //проверяем на положительность достижение всех симплекс разностей 
                if (СимплексРазности[s][i].p == ТипПеременной.Искуственная && СимплексРазности[s][i].Выведён == false)
                {
                    //оптимум не достигнут
                    return ДостижениеОптимума.ЗадачаНеразрешима;
                }
            }
            return ДостижениеОптимума.Достигнут;
        }
        void ВычислениеИтераций()
        {
            ДостижениеОптимума ДостижениеОптимума = ДостижениеОптимума.НеДостигнут;
            КоличествоИтераций = 0;
            do
            {
                ВычислениеEkij(КоличествоИтераций);
                ВычисленияРазрешающихМножителей(КоличествоИтераций);
                ВычисленияСимплексРазностей(КоличествоИтераций);
                УдалениеИзСимплексРазностейВыведеннойИскуственнойПеременной(КоличествоИтераций);
                ДостижениеОптимума = ДостижениеОптимума.Достигнут;
                ДостижениеОптимума = ПроверкаНаДостиженияОптимума(КоличествоИтераций);
                if (ДостижениеОптимума == ДостижениеОптимума.ЗадачаНеразрешима)
                {
                    it.Add(ДостижениеОптимума + "");
                    return;
                }
                if (ДостижениеОптимума == ДостижениеОптимума.НеДостигнут)
                {
                    ekij[КоличествоИтераций].kВводимыйВБазисСтолбец = ВычислениеВводимогоВБазис(КоличествоИтераций);
                    ВычисленияАсозвёздочкой(КоличествоИтераций);
                    ВычисленияQ(КоличествоИтераций);
                    ekij[КоличествоИтераций].rВыводимаяИзБазисаСтрока = ВычислениеВыводимогоИзБазиса(КоличествоИтераций);
                    it.Add(ekij[КоличествоИтераций].rВыводимаяИзБазисаСтрока + "-ая строка выводиться из базиса. "
                        + ekij[КоличествоИтераций].kВводимыйВБазисСтолбец + "-й столбец вводиться в базис");
                    КоличествоИтераций++;
                }
            } while (ДостижениеОптимума == ДостижениеОптимума.НеДостигнут);
            it.Add("Оптимум достигнут");
            ВычислениеОтвета();
        }
        void ВычислениеОтвета()
        {
            Ответ.Clear();
            for (int j = 0; j < Aij.Count; j++)
            {
                if (Aij[0].Строка[j].p == ТипПеременной.Базисная)
                {
                    Ответ.Add(j, new Дробь(0));
                }
            }
            for (int i = 0; i < ekij[ekij.Count - 1].Tablica.Count; i++)
            {
                if (Aij[i].Строка[ekij[ekij.Count - 1].Tablica[i].Базис].p == ТипПеременной.Базисная)
                {
                    Ответ[ekij[ekij.Count - 1].Tablica[i].Базис] = ekij[ekij.Count - 1].Tablica[i].Строка[0];
                }
            }
        }
    }
}
